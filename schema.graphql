# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  phone: String
  role: UserRoleType
  password: PasswordState
}

enum UserRoleType {
  admin
  manager
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  role: UserRoleTypeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  role: UserRoleType
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  phone: String
  role: UserRoleType
  password: String
}

type Color {
  id: ID!
  name: String
  brick: [Int]
  HEX: String
  RGB: [Int]
}

input ColorWhereUniqueInput {
  id: ID
  name: String
  HEX: String
}

input ColorWhereInput {
  AND: [ColorWhereInput!]
  OR: [ColorWhereInput!]
  NOT: [ColorWhereInput!]
  id: IDFilter
  name: StringFilter
  HEX: StringFilter
}

input ColorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  HEX: OrderDirection
}

input ColorUpdateInput {
  name: String
  HEX: String
}

input ColorUpdateArgs {
  where: ColorWhereUniqueInput!
  data: ColorUpdateInput!
}

input ColorCreateInput {
  name: String
  HEX: String
}

type Palette {
  id: ID!
  name: String
  colors(
    where: ColorWhereInput! = {}
    orderBy: [ColorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Color!]
  colorsCount(where: ColorWhereInput! = {}): Int
}

input PaletteWhereUniqueInput {
  id: ID
}

input PaletteWhereInput {
  AND: [PaletteWhereInput!]
  OR: [PaletteWhereInput!]
  NOT: [PaletteWhereInput!]
  id: IDFilter
  name: StringFilter
  colors: ColorManyRelationFilter
}

input ColorManyRelationFilter {
  every: ColorWhereInput
  some: ColorWhereInput
  none: ColorWhereInput
}

input PaletteOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PaletteUpdateInput {
  name: String
  colors: ColorRelateToManyForUpdateInput
}

input ColorRelateToManyForUpdateInput {
  disconnect: [ColorWhereUniqueInput!]
  set: [ColorWhereUniqueInput!]
  create: [ColorCreateInput!]
  connect: [ColorWhereUniqueInput!]
}

input PaletteUpdateArgs {
  where: PaletteWhereUniqueInput!
  data: PaletteUpdateInput!
}

input PaletteCreateInput {
  name: String
  colors: ColorRelateToManyForCreateInput
}

input ColorRelateToManyForCreateInput {
  create: [ColorCreateInput!]
  connect: [ColorWhereUniqueInput!]
}

type Frame {
  id: ID!
  name: String
  horizontal: Int
  vertical: Int
  price: Float
  width: Int
  height: Int
}

input FrameWhereUniqueInput {
  id: ID
}

input FrameWhereInput {
  AND: [FrameWhereInput!]
  OR: [FrameWhereInput!]
  NOT: [FrameWhereInput!]
  id: IDFilter
  horizontal: IntFilter
  vertical: IntFilter
  price: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input FrameOrderByInput {
  id: OrderDirection
  horizontal: OrderDirection
  vertical: OrderDirection
  price: OrderDirection
}

input FrameUpdateInput {
  horizontal: Int
  vertical: Int
  price: Float
}

input FrameUpdateArgs {
  where: FrameWhereUniqueInput!
  data: FrameUpdateInput!
}

input FrameCreateInput {
  horizontal: Int
  vertical: Int
  price: Float
}

type Presale {
  id: ID!
  number: Int
  created: DateTime
  frame: Frame
  image: Image
  share: String
  convertToSale: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PresaleWhereUniqueInput {
  id: ID
}

input PresaleWhereInput {
  AND: [PresaleWhereInput!]
  OR: [PresaleWhereInput!]
  NOT: [PresaleWhereInput!]
  id: IDFilter
  number: IntFilter
  created: DateTimeNullableFilter
  frame: FrameWhereInput
  image: ImageWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PresaleOrderByInput {
  id: OrderDirection
  number: OrderDirection
  created: OrderDirection
}

input PresaleUpdateInput {
  number: Int
  created: DateTime
  frame: FrameRelateToOneForUpdateInput
  image: ImageRelateToOneForUpdateInput
}

input FrameRelateToOneForUpdateInput {
  create: FrameCreateInput
  connect: FrameWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input PresaleUpdateArgs {
  where: PresaleWhereUniqueInput!
  data: PresaleUpdateInput!
}

input PresaleCreateInput {
  number: Int
  created: DateTime
  frame: FrameRelateToOneForCreateInput
  image: ImageRelateToOneForCreateInput
}

input FrameRelateToOneForCreateInput {
  create: FrameCreateInput
  connect: FrameWhereUniqueInput
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Sale {
  id: ID!
  number: Int
  created: DateTime
  frame: Frame
  image: Image
  price: Float
  boxManual: String
  userManual: String
}

input SaleWhereUniqueInput {
  id: ID
}

input SaleWhereInput {
  AND: [SaleWhereInput!]
  OR: [SaleWhereInput!]
  NOT: [SaleWhereInput!]
  id: IDFilter
  number: IntFilter
  created: DateTimeNullableFilter
  frame: FrameWhereInput
  image: ImageWhereInput
  price: FloatFilter
}

input SaleOrderByInput {
  id: OrderDirection
  number: OrderDirection
  created: OrderDirection
  price: OrderDirection
}

input SaleUpdateInput {
  number: Int
  created: DateTime
  frame: FrameRelateToOneForUpdateInput
  image: ImageRelateToOneForUpdateInput
  price: Float
}

input SaleUpdateArgs {
  where: SaleWhereUniqueInput!
  data: SaleUpdateInput!
}

input SaleCreateInput {
  number: Int
  created: DateTime
  frame: FrameRelateToOneForCreateInput
  image: ImageRelateToOneForCreateInput
  price: Float
}

type Image {
  id: ID!
  name: String
  image: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ImageUpdateInput {
  name: String
  image: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  image: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createColor(data: ColorCreateInput!): Color
  createColors(data: [ColorCreateInput!]!): [Color]
  updateColor(where: ColorWhereUniqueInput!, data: ColorUpdateInput!): Color
  updateColors(data: [ColorUpdateArgs!]!): [Color]
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteColors(where: [ColorWhereUniqueInput!]!): [Color]
  createPalette(data: PaletteCreateInput!): Palette
  createPalettes(data: [PaletteCreateInput!]!): [Palette]
  updatePalette(
    where: PaletteWhereUniqueInput!
    data: PaletteUpdateInput!
  ): Palette
  updatePalettes(data: [PaletteUpdateArgs!]!): [Palette]
  deletePalette(where: PaletteWhereUniqueInput!): Palette
  deletePalettes(where: [PaletteWhereUniqueInput!]!): [Palette]
  createFrame(data: FrameCreateInput!): Frame
  createFrames(data: [FrameCreateInput!]!): [Frame]
  updateFrame(where: FrameWhereUniqueInput!, data: FrameUpdateInput!): Frame
  updateFrames(data: [FrameUpdateArgs!]!): [Frame]
  deleteFrame(where: FrameWhereUniqueInput!): Frame
  deleteFrames(where: [FrameWhereUniqueInput!]!): [Frame]
  createPresale(data: PresaleCreateInput!): Presale
  createPresales(data: [PresaleCreateInput!]!): [Presale]
  updatePresale(
    where: PresaleWhereUniqueInput!
    data: PresaleUpdateInput!
  ): Presale
  updatePresales(data: [PresaleUpdateArgs!]!): [Presale]
  deletePresale(where: PresaleWhereUniqueInput!): Presale
  deletePresales(where: [PresaleWhereUniqueInput!]!): [Presale]
  createSale(data: SaleCreateInput!): Sale
  createSales(data: [SaleCreateInput!]!): [Sale]
  updateSale(where: SaleWhereUniqueInput!, data: SaleUpdateInput!): Sale
  updateSales(data: [SaleUpdateArgs!]!): [Sale]
  deleteSale(where: SaleWhereUniqueInput!): Sale
  deleteSales(where: [SaleWhereUniqueInput!]!): [Sale]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  role: UserRoleType
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  colors(
    where: ColorWhereInput! = {}
    orderBy: [ColorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Color!]
  color(where: ColorWhereUniqueInput!): Color
  colorsCount(where: ColorWhereInput! = {}): Int
  palettes(
    where: PaletteWhereInput! = {}
    orderBy: [PaletteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Palette!]
  palette(where: PaletteWhereUniqueInput!): Palette
  palettesCount(where: PaletteWhereInput! = {}): Int
  frames(
    where: FrameWhereInput! = {}
    orderBy: [FrameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Frame!]
  frame(where: FrameWhereUniqueInput!): Frame
  framesCount(where: FrameWhereInput! = {}): Int
  presales(
    where: PresaleWhereInput! = {}
    orderBy: [PresaleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Presale!]
  presale(where: PresaleWhereUniqueInput!): Presale
  presalesCount(where: PresaleWhereInput! = {}): Int
  sales(
    where: SaleWhereInput! = {}
    orderBy: [SaleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sale!]
  sale(where: SaleWhereUniqueInput!): Sale
  salesCount(where: SaleWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
